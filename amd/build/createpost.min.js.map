{"version":3,"sources":["../src/createpost.js"],"names":["define","$","Str","ModalFactory","ModalEvents","Fragment","Ajax","Y","CreatePost","selector","contextid","init","prototype","modal","triggers","get_string","then","title","create","type","types","SAVE_CANCEL","body","getBody","bind","getRoot","on","hidden","setBody","shown","append","save","submitForm","submitFormAjax","formdata","params","jsonformdata","JSON","stringify","loadFragment","handleFormSubmissionResponse","hide","use","M","core_formchangechecker","reset_form_dirty_state","document","location","reload","handleFormSubmissionFailure","data","e","preventDefault","changeEvent","createEvent","initEvent","find","each","index","element","dispatchEvent","invalid","merge","length","first","focus","formData","serialize","call","methodname","args","done","fail","submit"],"mappings":"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","sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Create post js logic.\n *\n * @package    format_timeline\n * @copyright  2020 onwards Willian Mano {@link http://conecti.me}\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\ndefine(['jquery', 'core/str', 'core/modal_factory', 'core/modal_events', 'core/fragment', 'core/ajax', 'core/yui'],\n    function($, Str, ModalFactory, ModalEvents, Fragment, Ajax, Y) {\n        /**\n         * Constructor for the CreatePost.\n         *\n         * @param selector The selector to open the modal\n         * @param contextid The course contextid\n         */\n        var CreatePost = function(selector, contextid) {\n            this.contextid = contextid;\n            this.init(selector);\n        };\n\n        /**\n         * @var {Modal} modal\n         * @private\n         */\n        CreatePost.prototype.modal = null;\n\n        /**\n         * @var {int} contextid\n         * @private\n         */\n        CreatePost.prototype.contextid = -1;\n\n        /**\n         * Set up all of the event handling for the modal.\n         *\n         * @method init\n         */\n        CreatePost.prototype.init = function(selector) {\n            var triggers = $(selector);\n\n            return Str.get_string('createpost', 'format_timeline').then(function(title) {\n                // Create the modal.\n                return ModalFactory.create({\n                    type: ModalFactory.types.SAVE_CANCEL,\n                    title: title,\n                    body: this.getBody()\n                }, triggers);\n            }.bind(this)).then(function(modal) {\n                // Keep a reference to the modal.\n                this.modal = modal;\n\n                // We want to reset the form every time it is opened.\n                this.modal.getRoot().on(ModalEvents.hidden, function() {\n                    this.modal.setBody(this.getBody());\n                }.bind(this));\n\n                // We want to hide the submit buttons every time it is opened.\n                this.modal.getRoot().on(ModalEvents.shown, function() {\n                    this.modal.getRoot().append('<style>[data-fieldtype=submit] { display: none ! important; }</style>');\n                }.bind(this));\n\n                // We catch the modal save event, and use it to submit the form inside the modal.\n                // Triggering a form submission will give JS validation scripts a chance to check for errors.\n                this.modal.getRoot().on(ModalEvents.save, this.submitForm.bind(this));\n                // We also catch the form submit event and use it to submit the form with ajax.\n                this.modal.getRoot().on('submit', 'form', this.submitFormAjax.bind(this));\n\n                return this.modal;\n            }.bind(this));\n        };\n\n        /**\n         * @method getBody\n         *\n         * @private\n         *\n         * @return {Promise}\n         */\n        CreatePost.prototype.getBody = function(formdata) {\n            if (typeof formdata === \"undefined\") {\n                formdata = {};\n            }\n\n            // Get the content of the modal.\n            var params = {jsonformdata: JSON.stringify(formdata)};\n\n            return Fragment.loadFragment('format_timeline', 'createpost_form', this.contextid, params);\n        };\n\n        /**\n         * @method handleFormSubmissionResponse\n         *\n         * @private\n         *\n         * @return {Promise}\n         */\n        CreatePost.prototype.handleFormSubmissionResponse = function() {\n            this.modal.hide();\n            // We could trigger an event instead.\n            Y.use('moodle-core-formchangechecker', function() {\n                M.core_formchangechecker.reset_form_dirty_state();\n            });\n\n            document.location.reload();\n        };\n\n        /**\n         * @method handleFormSubmissionFailure\n         *\n         * @private\n         *\n         * @return {Promise}\n         */\n        CreatePost.prototype.handleFormSubmissionFailure = function(data) {\n            // Oh noes! Epic fail :(\n            // Ah wait - this is normal. We need to re-display the form with errors!\n            this.modal.setBody(this.getBody(data));\n        };\n\n        /**\n         * Private method\n         *\n         * @method submitFormAjax\n         *\n         * @private\n         *\n         * @param {Event} e Form submission event.\n         */\n        CreatePost.prototype.submitFormAjax = function(e) {\n            // We don't want to do a real form submission.\n            e.preventDefault();\n\n            var changeEvent = document.createEvent('HTMLEvents');\n            changeEvent.initEvent('change', true, true);\n\n            // Prompt all inputs to run their validation functions.\n            // Normally this would happen when the form is submitted, but\n            // since we aren't submitting the form normally we need to run client side\n            // validation.\n            this.modal.getRoot().find(':input').each(function(index, element) {\n                element.dispatchEvent(changeEvent);\n            });\n\n            // Now the change events have run, see if there are any \"invalid\" form fields.\n            var invalid = $.merge(\n                this.modal.getRoot().find('[aria-invalid=\"true\"]'),\n                this.modal.getRoot().find('.error')\n            );\n\n            // If we found invalid fields, focus on the first one and do not submit via ajax.\n            if (invalid.length) {\n                invalid.first().focus();\n                return;\n            }\n\n            // Convert all the form elements values to a serialised string.\n            var formData = this.modal.getRoot().find('form').serialize();\n\n            // Now we can continue...\n            Ajax.call([{\n                methodname: 'format_timeline_createpost',\n                args: {contextid: this.contextid, jsonformdata: JSON.stringify(formData)},\n                done: this.handleFormSubmissionResponse.bind(this, formData),\n                fail: this.handleFormSubmissionFailure.bind(this, formData)\n            }]);\n        };\n\n        /**\n         * This triggers a form submission, so that any mform elements can do final tricks before the form submission is processed.\n         *\n         * @method submitForm\n         * @param {Event} e Form submission event.\n         * @private\n         */\n        CreatePost.prototype.submitForm = function(e) {\n            e.preventDefault();\n\n            this.modal.getRoot().find('form').submit();\n        };\n\n        return {\n            init: function(selector, contextid) {\n                return new CreatePost(selector, contextid);\n            }\n        };\n    }\n);\n"],"file":"createpost.min.js"}